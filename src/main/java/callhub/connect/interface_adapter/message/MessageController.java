package callhub.connect.interface_adapter.message;

import callhub.connect.entities.Sender;
import callhub.connect.use_case.message.MessageInputBoundary;
import callhub.connect.use_case.message.MessageInputData;
import callhub.connect.use_case.message.MessageInteractor;
import com.google.gson.Gson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;

@RestController
public class MessageController {
    private static final Gson gson = new Gson();

    @Autowired
    private MessageInputBoundary messageInteractor;

    /**
     * Sends a message from a customer to an employee within a specific session and broadcasts it to the appropriate topic.
     *
     * @param sessionId The unique identifier (ID) of the session associated with the message.
     * @param message   The content of the message sent by the customer.
     * @return A JSON representation of the response data generated by the messageInteractor.
     * @throws Exception if an error occurs during message processing.
     */
    @MessageMapping("/message-customer/{sessionId}")
    @SendTo("/topic/message-employee/{sessionId}")
    public String sendMessageCustomer(@DestinationVariable String sessionId, String message) throws Exception {
        MessageInputData inputData = new MessageInputData(sessionId, message, Sender.CUSTOMER);
        HashMap<String, String> response = messageInteractor.newMessage(inputData);
        return gson.toJson(response);
    }

    /**
     * Sends a message from an employee to a customer within a specific session and broadcasts it to the appropriate topic.
     *
     * @param sessionId The unique identifier (ID) of the session associated with the message.
     * @param message   The content of the message sent by the employee.
     * @return A JSON representation of the response data generated by the messageInteractor.
     * @throws Exception if an error occurs during message processing.
     */
    @MessageMapping("/message-employee/{sessionId}")
    @SendTo("/topic/message-customer/{sessionId}")
    public String sendMessageEmployee(@DestinationVariable String sessionId, String message) throws Exception {
        MessageInputData inputData = new MessageInputData(sessionId, message, Sender.EMPLOYEE);
        HashMap<String, String> response = messageInteractor.newMessage(inputData);
        return gson.toJson(response);
    }

    /**
     * Handles the ending of a session.
     *
     * This method is mapped to respond to messages on '/end-session/{sessionId}' path.
     * It sends a message to '/topic/end-session/{sessionId}' indicating that the session has ended.
     *
     * @param sessionId The ID of the session to be ended.
     * @return A string message indicating the session has ended.
     * @throws Exception if any error occurs during the process.
     */
    @MessageMapping("/end-session/{sessionId}")
    @SendTo("/topic/end-session/{sessionId}")
    public String endSession(@DestinationVariable String sessionId) throws Exception {
        return "session ended";
    }
}
